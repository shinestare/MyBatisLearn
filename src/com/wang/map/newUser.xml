<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.wang.test.NewMapper">
	<!-- 1、select元素 -->
	<!-- select元素的属性描述如下 -->
	<!-- id：在命名空间中唯一的标识符，可以被用来引用这条语句 -->
	<!-- parameterType：将会传入这条语句的参数类的完全限定名或别名。这个属性是可选的，因为MyBatis可以通过TypeHandler推断出具体传入语句的参数，默认值为unset -->
	<!-- resultType：从这条语句中返回的期望类型的类的完全限定名或别名。注意如果是集合情形，那应该是集合可以包含的类型，而不能是集合本身。返回时可以使用resultType或resultMap但不能同时使用。 -->
	<!-- resultMap：外部resultMap的命名引用。结果集的映射是MyBatis最强大的特性，对其有一个好的理解的话，很多复杂映射的情形都能迎刃而解。返回时可以使用resultType或resultMap但不能同时使用。 -->
	<!-- flushCache：如果设置为true，则任何时候只要语句被调用，都会导致本地缓存和二级缓存都被清空，默认值是false。 -->
	<!-- useCache：如果设置为true，将会导致本条语句的结果被二级缓存，在select元素当中默认值是true。 -->
	<!-- timeout：这个设置是在抛出异常之前，驱动程序等待数据库返回请求结果的秒数。默认是unset（依赖驱动） -->
	<!-- fetchSize：这是尝试影响驱动程序每次批量返回的结果行数和这个设置值相等。默认值为unset（依赖驱动） -->
	<!-- statementType：值为STATEMENT、PREPARED、CALLABLE。这会让MyBatis分别使用JDBC中的Statement、PreparedStatement或CallableStatement，默认值为PREPARED。 -->
	<!-- resultSetType：结果集的类型，值为FORWARD_ONLY、SCROLL_SENSITIVE或SCROLL_INSENSITIVE，默认值是unset（依赖驱动） -->
	<!-- databaseId：如果配置了databaseIdProvider，MyBatis会加载所有的不带databaseId或匹配当前databaseId的语句；如果带或者不带的语句都有，则不带的会被忽略。 -->
	<!-- resultOrdered：这个设置仅针对嵌套结果select语句适用：如果为true，就是假设包含了嵌套结果集或是分组了，这样的话当返回一个主结果行的时候，就不会发生对前面结果集引用的情况。这就使得在获取嵌套的结果集时不至于导致内存不够用。默认值为false -->
	<!-- resultSets：这个设置仅对多结果集的情况适用，它将列出语句执行后返回的结果集并给每个结果集一个名称，名称是逗号分隔的。 -->
	<select id="selectUser" parameterType="int" resultType="newUser">
		select * from user where id = #{id}
	</select>
	
	<!-- 2、insert、update和delete元素 -->
	<!-- 其属性大多和select一样，他们特有的属性描述如下： -->
	<!-- useGeneratedKeys：（仅对insert和update有用）这会令MyBatis适用JDBC的getGeneratedKeys方法来获取由数据库内部生成的主键（比如，像MySQL和SQL Server这样的关系数据库管理系统的自动递增字段），默认值是false。 -->
	<!-- keyProperty：（仅对insert和update有用）唯一标记一个属性，MyBatis会通过getGeneratedKeys的返回值或者通过insert语句的selectKey子元素设置它的键值，默认是unset。如果希望得到多个生成的列，也可以是逗号分隔的属性名称列表 -->
	<!-- keyColumn：（仅对insert和update有用）通过生成的键值设置表中的列名，这个设置仅对某些数据库（像PostgreSQL）是必须的，当主键列不是列表中的第一列时需要设置。如果希望得到多个生成的列，也可以是逗号分隔的属性名称列表 -->
	
	<!-- 插入语句丰富配置规则（如返回插入后的ID等）详见《Spring+MyBatis企业应用实战P158-ch9.3.2》 -->
	<insert id="insertUser">
		insert into user(username, password) values(#{username}, #{password})
	</insert>
	
	<insert id="saveUser" parameterType="newUser" useGeneratedKeys="true" keyProperty="id">
		insert into user(username, password) values(#{username}, #{password})
	</insert>
	
	<update id="updateUser" parameterType="newUser">
		update user set
		  username=#{username},
		  password=#{password}
		where id=#{id}
	</update>
	
	<delete id="deleteUser" parameterType="int">
		delete from user where id=#{id}
	</delete>
	
	<!-- ResultMaps -->
	<select id="selectNewuserMap" resultType="map">
		select * from user
	</select>
	
	<!-- ResultMap，使用POJOs作为领域模型描述数据。type表示resultMap实际返回的类型。 -->
	<resultMap type="com.wang.pojo.NewUser" id="userResultMap">
		<!-- resultMap的子元素id，表示数据库的主键，其中column属性表示数据库表的列名，property表示数据库映射到返回类型的属性。 -->
		<id property="id" column="id" />
		<!-- resultMap的子元素result，表示数据库表的普通列，其中column属性表示数据库表的列名，property表示数据库列映射搭配返回类型的属性 -->
		<result property="username" column="username" />
		<!-- <result property="age" column="age" /> -->
		<result property="password" column="password" />
	</resultMap>
	<!-- resultMap = "userResultMap"表示引用上面的resultMap进行数据库表和返回对象类型的映射 -->
	<select id="selectNewuserMap2" resultMap="userResultMap">
		select * from user
	</select>
	
	<!-- 3、sql元素 -->
	<!-- sql元素可以被用来定义可重用的SQL代码段，可以包含在其他语句中。它可以被静态地（在加载参数时）参数化。不同的属性值通过包含的实例发生变化。例如： -->
	<!--  -->
	<sql id="userColumns">${alias}.id, ${alias}.username, ${alias}.password</sql>
	<!-- 这个SQL片段可以被包含在其他语句中 -->
	<!-- <select id="selectUsers222" resultType="map">
		select
			<include refid="userColumns"><property name="alias" value="t1"/></include>
		from user t1
	</select> -->
</mapper>